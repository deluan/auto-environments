#!/usr/bin/env ruby

require 'yaml'
require 'pty'
require 'pathname'
require 'environment'
require 'inventory_file_writer'
require 'playbook_file_writer'

def configure(environment)
  ansible_project_base_dir = Pathname.new(ARGV[1]).realpath

  inventory_path = environment.create_localhost_inventory(InventoryFileWriter.new(environment.domain, environment.name))
  playbook_path = environment.create_playbook(PlaybookFileWriter.new(environment.domain, environment.name, "#{ansible_project_base_dir}/create.yml"))

  ansible_command = "ANSIBLE_ROLES_PATH=#{ansible_project_base_dir}/roles ansible-playbook #{playbook_path} -i #{inventory_path} -e \"app_user=petshop env_name=#{environment.name} domain=#{environment.domain}\""

  ansible_output = execute_shell "cd #{ansible_project_base_dir} && #{ansible_command}"
  success = ($?.exitstatus == 0)

  FileUtils.mkpath('log')
  log_file = File.new('./log/auto-environment.log', 'a')
  write_ansible_log(log_file, ansible_command, ansible_output)
  print_results(environment, success, log_file)
end

def write_ansible_log(log_file, ansible_command, ansible_output)
  log_file.write("#{Time.now.to_s}: Executing ansible command: #{ansible_command}\n#{ansible_output}")
end

def print_results(environment, success, log_file)
  if success
    environment.machine_names.each do |machine_name|
      puts "\n#{machine_name}.#{environment.name}.#{environment.domain} provisioned\n  with #{environment.roles_for(machine_name).join(', ')}\n"
    end
  else
    msg = "Oops, something went wrong. Please see #{log_file.path}"
    msg += ' or run again without -q for more information' if @quiet
    puts msg
  end
end

def execute_shell(command)
  output = ''
  begin
    PTY.spawn(command) do |stdin, stdout, pid|
      begin
        stdin.each { |line| print line unless @quiet; output += line }
      rescue Errno::EIO
      end
      Process.wait(pid)
    end
  rescue PTY::ChildExited
    puts "Error executing command '#{command}'!"
  end
  return output
end

@quiet = ARGV.delete('-q') ? true : false

abort("Usage: auto-environment <environment.yml> <path/to/ansible_project>\n\nOptions:\n  -q\t\tRun in quiet mode (suppresses ansible output)") unless ARGV[0] and ARGV[1]

environment = Environment.new(File.new(ARGV[0]))
configure(environment)
